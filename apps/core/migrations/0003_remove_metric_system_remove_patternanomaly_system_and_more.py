# Generated by Django 5.2.4 on 2025-07-29 16:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0002_alter_incident_status"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="metric",
            name="system",
        ),
        migrations.RemoveField(
            model_name="patternanomaly",
            name="system",
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("color", models.CharField(default="#3498db", max_length=7)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Solution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("steps", models.TextField(help_text="Step-by-step solution")),
                (
                    "keywords",
                    models.TextField(
                        blank=True, help_text="Comma-separated keywords for matching"
                    ),
                ),
                ("times_suggested", models.IntegerField(default=0)),
                ("times_successful", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-times_successful", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "Open"),
                            ("IN_PROGRESS", "In Progress"),
                            ("WAITING_USER", "Waiting for User"),
                            ("RESOLVED", "Resolved"),
                            ("CLOSED", "Closed"),
                        ],
                        default="OPEN",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                (
                    "system_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="OS, software versions, etc.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("closed_at", models.DateTimeField(blank=True, null=True)),
                ("resolution", models.TextField(blank=True)),
                ("resolution_time_minutes", models.IntegerField(blank=True, null=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("tickets_created", models.IntegerField(default=0)),
                ("tickets_resolved", models.IntegerField(default=0)),
                ("tickets_closed", models.IntegerField(default=0)),
                ("category_breakdown", models.JSONField(default=dict)),
                (
                    "avg_resolution_time",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "avg_first_response_time",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-date"],
                "unique_together": {("date",)},
            },
        ),
        migrations.CreateModel(
            name="TicketComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                (
                    "is_internal",
                    models.BooleanField(
                        default=False,
                        help_text="Internal notes not visible to ticket creator",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="core.ticket",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketPattern",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pattern_type",
                    models.CharField(
                        choices=[
                            ("KEYWORD", "Keyword Pattern"),
                            ("CATEGORY", "Category Pattern"),
                            ("TIME", "Time-based Pattern"),
                            ("USER", "User Pattern"),
                            ("SYMPTOM", "Symptom Pattern"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "pattern_data",
                    models.JSONField(help_text="Pattern details and parameters"),
                ),
                ("matching_keywords", models.TextField(blank=True)),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("times_matched", models.IntegerField(default=0)),
                ("times_helpful", models.IntegerField(default=0)),
                ("discovered_at", models.DateTimeField(auto_now_add=True)),
                ("last_seen", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.category",
                    ),
                ),
                (
                    "suggested_solutions",
                    models.ManyToManyField(blank=True, to="core.solution"),
                ),
            ],
            options={
                "ordering": ["-confidence_score", "-times_helpful"],
            },
        ),
        migrations.CreateModel(
            name="TicketSolution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("was_successful", models.BooleanField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("applied_at", models.DateTimeField(auto_now_add=True)),
                (
                    "applied_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "solution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ticket_applications",
                        to="core.solution",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tried_solutions",
                        to="core.ticket",
                    ),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="Incident",
        ),
        migrations.DeleteModel(
            name="Metric",
        ),
        migrations.DeleteModel(
            name="MonitoringSystem",
        ),
        migrations.DeleteModel(
            name="PatternAnomaly",
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["status", "priority"], name="core_ticket_status_ecde4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["category", "created_at"], name="core_ticket_categor_223e5d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["assigned_to", "status"], name="core_ticket_assigne_833ed1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="ticketsolution",
            unique_together={("ticket", "solution")},
        ),
    ]
